
https://developer.android.google.cn/topic/libraries/architecture/livedata

LiveData是和LifecycleOwner生命周期绑定的事件通知。


调用实例：
    var liveData= MutableLiveData<DataEntity>()
    //设置监听
    liveData.observe(this,object:Observer<DataEntity>{
        override fun onChanged(t: DataEntity?) {

        }

    })

    //setValue  触发通知
    liveData.value=DataEntity("hello world")


基于androidx分析：
1、设置监听
    //liveData保存
    LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);
    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);
    //注册到lifecycle，当lifecycle生命周期发生改变，回调LifecycleBoundObserver
    owner.getLifecycle().addObserver(wrapper);
2、setValue 触发通知
observer.mObserver.onChanged((T) mData);


1、Activity继承关系
public class ComponentActivity extends Activity implements LifecycleOwner
public class FragmentActivity extends ComponentActivity implements ViewModelStoreOwner
public class AppCompatActivity extends FragmentActivity


2、
public class ComponentActivity extends Activity implements LifecycleOwner{

    private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);

    @Override
    public Lifecycle getLifecycle() {
        return mLifecycleRegistry;
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        mLifecycleRegistry.markState(Lifecycle.State.CREATED);
        super.onSaveInstanceState(outState);
    }
}

public class LifecycleRegistry extends Lifecycle {
    private final WeakReference<LifecycleOwner> mLifecycleOwner;

    public LifecycleRegistry(@NonNull LifecycleOwner provider) {
        mLifecycleOwner = new WeakReference<>(provider);
        mState = INITIALIZED;
    }

    //添加监听
    @Override
    public void addObserver(@NonNull LifecycleObserver observer) {
        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);
        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);
    }
    //注销监听
    @Override
    public void removeObserver(@NonNull LifecycleObserver observer) {
        mObserverMap.remove(observer);
    }

    //LifecycleObserver包装类
    static class ObserverWithState {
        State mState;
        GenericLifecycleObserver mLifecycleObserver;

        ObserverWithState(LifecycleObserver observer, State initialState) {
            mLifecycleObserver = Lifecycling.getCallback(observer);
            mState = initialState;
        }

        void dispatchEvent(LifecycleOwner owner, Event event) {
            State newState = getStateAfter(event);
            mState = min(mState, newState);
            mLifecycleObserver.onStateChanged(owner, event); //状态回调
            mState = newState;
        }
    }
}

public abstract class LiveData<T> {
    private SafeIterableMap<Observer<? super T>, ObserverWrapper> mObservers =
            new SafeIterableMap<>();

    @MainThread
    protected void setValue(T value) {
        assertMainThread("setValue");
        mVersion++;
        mData = value;
        dispatchingValue(null);
    }

    protected void postValue(T value) {
        boolean postTask;
        synchronized (mDataLock) {
            postTask = mPendingData == NOT_SET;
            mPendingData = value; //保存为待发送数据，如果连续调用postValue，就可能替换调用之前的 mPendingData
        }
        if (!postTask) {
            return;
        }
        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);
    }

    @MainThread
    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<? super T> observer) {

        if (owner.getLifecycle().getCurrentState() == DESTROYED) {
            return;
        }
        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);
        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);

        if (existing != null && !existing.isAttachedTo(owner)) {
            throw new IllegalArgumentException("Cannot add the same observer"
                    + " with different lifecycles");
        }
        if (existing != null) {
            return;
        }
        owner.getLifecycle().addObserver(wrapper); //
    }

    //注销
    @MainThread
    public void removeObserver(@NonNull final Observer<? super T> observer) {
        ObserverWrapper removed = mObservers.remove(observer);
        if (removed == null) {
            return;
        }
        removed.detachObserver(); //然后调用 mOwner.getLifecycle().removeObserver(this);
        removed.activeStateChanged(false);
    }
    class LifecycleBoundObserver extends ObserverWrapper implements GenericLifecycleObserver {
        @NonNull
        final LifecycleOwner mOwner;

        LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<? super T> observer) {
            super(observer);
            mOwner = owner;
        }


        @Override
        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {
            if (mOwner.getLifecycle().getCurrentState() == DESTROYED) {
                removeObserver(mObserver);
                return;
            }
            activeStateChanged(shouldBeActive());
        }

        @Override
        void detachObserver() {
            mOwner.getLifecycle().removeObserver(this);
        }
    }

}

//----------------------------注意要点
1、setValue只能在主线程中
    @MainThread
    protected void setValue(T value) {
        assertMainThread("setValue");
        mVersion++;
        mData = value;
        dispatchingValue(null);
    }
2、postValue
在子线程把数据发送到主线程，连续调用postValue，会丢弃老的值。


textLiveData.postValue("1")
textLiveData.postValue("2")
结果在回调处只回调了 "2"。
原因分析：
postValue 是把值 post 到主线程来执行，而我们的主线程是取队列里的消息一个接一个处理的，所以处理不会那么及时。
分析一下上面的场景，先 post 了一个 "1"，此时 mPendingData = "1"，postTask = true，此任务被 post 给主线程等待执行。
紧接着又 post "2"，此时 mPendingData = "2"，postTask = false，只会修改一下 mPendingData 的值，
之后主线程的任务在拿到的mPendingData的值就为2。所以我们得到的回调总是最后一个。
总结: postValue 其实是为多线程环境设计的，普通的场景没有必要使用它。直接使用 setValue 就行。

    private volatile Object mData = NOT_SET;
    volatile Object mPendingData = NOT_SET;

    protected void postValue(T value) {
        boolean postTask;
        synchronized (mDataLock) {
            postTask = mPendingData == NOT_SET;
            mPendingData = value;
        }
        if (!postTask) {
            return;
        }
        //post到主线程消息队列等待执行，如果在执行前，又post了其他newValue，mPendingData的值会被替换为newValue，之后主线程中拿到的值就是newValue
        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);
    }

     private final Runnable mPostValueRunnable = new Runnable() {
         @Override
         public void run() {
             Object newValue;
             synchronized (mDataLock) {
                 newValue = mPendingData; //如果在主线程运行这之前，子线程连续post了多个value，则现在拿到的是最后post的value
                 mPendingData = NOT_SET;
             }
             setValue((T) newValue);
         }
     };

3、通过observe()注册的observer
public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<? super T> observer) {
           //必须在主线程中调用
          assertMainThread("observe");
          if (owner.getLifecycle().getCurrentState() == DESTROYED) {
              //owner已经处于DESTORYED状态，则忽略
              return;
          }
          LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);
          ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);
          if (existing != null && !existing.isAttachedTo(owner)) {
              throw new IllegalArgumentException("Cannot add the same observer"
                      + " with different lifecycles");
          }
          if (existing != null) {
              return;
          }
          //与owner绑定
          owner.getLifecycle().addObserver(wrapper);
}
1）是与lifecycle owner生命周期自动绑定的
2）If LiveData already has data set, it will be delivered to the observer.

3）The observer will only receive events if the owner is in {@link Lifecycle.State#STARTED} or {@link Lifecycle.State#RESUMED} state (active).
当LifecycleOwner 处于activt状态  即处于Lifecycle.State#STARTED  Lifecycle.State#RESUMED 状态时，observer才能收到通知

4）If the owner moves to the {@link Lifecycle.State#DESTROYED} state, the observer will automatically be removed.
当lifcycle进入Lifecycle.State#DESTROYED状态时，会自动注销监听。

5）When data changes while the {@code owner} is not active, it will not receive any updates.
If it becomes active again, it will receive the last available data automatically.


4、observeForever()注册的observer
与LifecycleOwner生命周期没有绑定关系，不管owner处于什么状态，observer都会收到通知，需要手动调用removeObserver解绑
@MainThread
public void observeForever(@NonNull Observer<? super T> observer) {
        assertMainThread("observeForever");

        AlwaysActiveObserver wrapper = new AlwaysActiveObserver(observer);
        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);
        if (existing != null && existing instanceof LiveData.LifecycleBoundObserver) {
            throw new IllegalArgumentException("Cannot add the same observer"
                    + " with different lifecycles");
        }
        if (existing != null) {
            return;
        }
        wrapper.activeStateChanged(true);
}

5、有值就会回调
LiveData 和 组件生命周期绑定，有值就会回调的特性有利有弊
先发送一个通知后，后面同一个LifecycleOwner注册的Observer会立即收到通知
        btn_send.setOnClickListener {
            //发送通知
            liveData.value=DataEntity("hellow")
        }
        btn_regist.setOnClickListener {
            //注册observer，同一个LifecycleOwner
            liveData.observe(MainActivity@this, Observer {
                println("22 收到通知: ${it.str}")
            })
        }

 解决思路：
class FleetingLiveData<T> : MutableLiveData<T>() {

    override fun setValue(value: T) {
        super.setValue(value)
        super.setValue(null) //再发送数据后，发射一个null，后面同一LifecycleOwner注册的observer就会收到null
    }

    override fun observe(owner: LifecycleOwner, observer: Observer<in T>) {
        super.observe(owner, Observer {
            if (it == null) return@Observer //过滤null 这样后面注册的observer就不会收到之前的通知
            observer.onChanged(it)
        })
    }
}



















